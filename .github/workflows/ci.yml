name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security_scan:
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Vérifier le code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2: Construire l'image Docker
      - name: Build Docker image
        run: |
          docker build -t my-app .  # Construire l'image Docker

      # Étape 3: Scanner l'image Docker avec Trivy
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "my-app"
          format: 'table'  # Scanner au format lisible (table)

      # Étape 4.1: Scanner l'image Docker avec Snyk (format table affiché)
      - name: Snyk test - Show table output
        uses: snyk/actions/docker@master
        with:
          image: my-app
          args: --file=Dockerfile  # Normal test (table affichée dans les logs)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Étape 4.2: Scanner l'image Docker avec Snyk (et enregistrer un fichier JSON)
      - name: Snyk test - Generate JSON report
        run: |
          snyk container test my-app --file=Dockerfile --json > snyk-report.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Étape 5: Détecter les secrets avec GitLeaks
      - name: Install GitLeaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.10.1/gitleaks-linux-amd64
          chmod +x gitleaks-linux-amd64
          sudo mv gitleaks-linux-amd64 /usr/local/bin/gitleaks
          gitleaks --version

      - name: Run GitLeaks to detect secrets
        run: |
          gitleaks detect --source=./ --verbose

      # Étape 6: Upload du rapport JSON (optionnel mais conseillé)
      - name: Upload Snyk JSON report
        uses: actions/upload-artifact@v3.1.3
        with:
          name: snyk-report
          path: snyk-report.json

      # Étape 7: Nettoyer l'image Docker
      - name: Clean up Docker image
        run: |
          docker rmi my-app
